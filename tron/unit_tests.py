# 8-queens solver with genetic algorithm implementation
# unit tests

import unittest
from player import Evaluator, TronBoard, Player, map_move_to_string, move

class TronTests(unittest.TestCase):

    def test_move_validity(self):

        current_player = 'g'
        pos1 = [8, 1] 
        pos2 = [8, 13]
        board = [['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'], 
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','r','-','-','-','-','-','-','-','-','-','-','-','g','#'],
                ['#','r','-','-','-','-','-','-','-','-','-','-','-','g','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']]
    
        best_move = move(current_player, 'r', 'g', pos1, pos2, board)
        self.assertTrue(best_move != "RIGHT", msg=("Terrible move bro"))
        

    def test_legal_moves1(self):

        current_player = 'g'
        pos1 = [8, 1] 
        pos2 = [8, 13]
        board = [['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'], 
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','r','-','-','-','-','-','-','-','-','-','-','-','g','#'],
                ['#','r','-','-','-','-','-','-','-','-','-','-','-','g','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']]
    
        game = TronBoard(board, 15, 15, 'r', 'g', pos1, pos2, current_player)
        moves = [map_move_to_string(board, pos2[0], pos2[1], val[0], val[1]) for val in game.get_legal_moves()]
        self.assertTrue("LEFT" in moves and "DOWN" in moves, msg=("Terrible move bro"))
    
    
    def test_legal_moves2(self):

        current_player = 'g'
        pos1 = [8, 1] 
        pos2 = [8, 10]
        board = [['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'], 
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','r','-','-','-','-','-','-','-','-','-','-','-','g','#'],
                ['#','r','-','-','-','-','-','-','-','-','g','g','g','g','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','-','-','-','-','-','-','-','-','-','-','-','-','-','#'],
                ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']]
    
        game = TronBoard(board, 15, 15, 'r', 'g', pos1, pos2, current_player)
        moves = [map_move_to_string(board, pos2[0], pos2[1], val[0], val[1]) for val in game.get_legal_moves()]
        self.assertTrue("LEFT" in moves and "DOWN" in moves and "UP" in moves, msg=("Terrible move bro"))
        
        


if __name__ == '__main__':
    unittest.main()

